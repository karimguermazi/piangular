{"ast":null,"code":"\"use strict\";\n\nvar __decorate = this && this.__decorate || function (decorators, target, key, desc) {\n  var c = arguments.length,\n      r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc,\n      d;\n  if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\n  return c > 3 && r && Object.defineProperty(target, key, r), r;\n};\n\nvar __metadata = this && this.__metadata || function (k, v) {\n  if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(k, v);\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.TransactionComponent = void 0;\n\nconst core_1 = require(\"@angular/core\");\n\nconst transaction_service_1 = require(\"app/Service/transaction.service\");\n\nconst router_1 = require(\"@angular/router\");\n\nlet TransactionComponent = class TransactionComponent {\n  constructor(ts, router, _changeDetectorRef) {\n    this.ts = ts;\n    this.router = router;\n    this._changeDetectorRef = _changeDetectorRef;\n    this.currentPage = 1;\n    this.itemsPerPageOptions = [3, 5, 10];\n    this.transactions = [];\n    this.itemsPerPage = this.itemsPerPageOptions[0];\n    this.updatePagedTransactions();\n  }\n\n  ngOnInit() {\n    this.ts.getAllTransactions().subscribe(data => {\n      this.transactions = data;\n    });\n  }\n\n  deletetransaction(id) {\n    this.ts.UndoTransaction(id, this.tr).subscribe(response => {\n      this.reloadPage();\n    });\n  }\n\n  reloadPage() {\n    window.location.reload();\n  }\n\n  get startItemIndex() {\n    return (this.currentPage - 1) * this.itemsPerPage + 1;\n  }\n\n  get pagedTransactions() {\n    const startIndex = (this.currentPage - 1) * this.itemsPerPage;\n    const endIndex = startIndex + this.itemsPerPage;\n    this.endItemIndex = endIndex <= this.transactions.length ? endIndex : this.transactions.length;\n    console.log(this.transactions.slice(startIndex, endIndex));\n    return this.transactions.slice(startIndex, endIndex);\n  }\n\n  get totalPages() {\n    return Math.ceil(this.transactions.length / this.itemsPerPage);\n  }\n\n  onItemsPerPageChange(event) {\n    this.itemsPerPage = Number(event.target.value);\n    this.currentPage = 1;\n    this.updatePagedTransactions();\n  }\n\n  prevPage() {\n    this.currentPage--;\n    this.updatePagedTransactions();\n  }\n\n  nextPage() {\n    this.currentPage++;\n    this.updatePagedTransactions();\n  }\n\n  updatePagedTransactions() {\n    const startIndex = (this.currentPage - 1) * this.itemsPerPage;\n    const endIndex = startIndex + this.itemsPerPage;\n    this.endItemIndex = endIndex <= this.transactions.length ? endIndex : this.transactions.length;\n  }\n\n};\nTransactionComponent = __decorate([(0, core_1.Component)({\n  selector: 'app-transaction',\n  templateUrl: './transaction.component.html',\n  styleUrls: ['./transaction.component.scss']\n}), __metadata(\"design:paramtypes\", [transaction_service_1.TransactionService, router_1.Router, core_1.ChangeDetectorRef])], TransactionComponent);\nexports.TransactionComponent = TransactionComponent;","map":null,"metadata":{},"sourceType":"script"}